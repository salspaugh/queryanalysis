
from argparse import ArgumentParser
from contextlib import closing
from queryutils import get_user_sessions, parse_query
from queryutils.splunktypes import command_type_lookup
from sqlite3 import connect

import ConfigParser
import os
import sys

BYTES_IN_MB = 1048576
DATABASE = 'splunkqueries.db'
QUERIES_CSV = "/Users/salspaugh/splunk-internship/data/storm_may2013/SearchAuditLogsApril1ToApril7.csv"
APPS_DIR = "/Users/salspaugh/splunk-internship/data/splunk_apps/for_sharing/"
MACROS_FILE = "macros.conf"
SAVEDSEARCHES_FILE = "savedsearches.conf"

SQL_DIR = "queryanalysis/sql/"
MAIN_SQL = "main_schema.sql"
CMDS_AND_ARGS_SQL = "commands_and_arguments_schema.sql"
TEMPLATES_SQL = "templates_schema.sql"

def init_main():
    execute_db_script(SQL_DIR + MAIN_SQL)

def init_commands_and_arguments():
    execute_db_script(SQL_DIR + CMDS_AND_ARGS_SQL)

def init_all():
    execute_db_script(SQL_DIR + MAIN_SQL)
    execute_db_script(SQL_DIR + CMDS_AND_ARGS_SQL)
    execute_db_script(SQL_DIR + TEMPLATES_SQL)

def execute_db_script(script):
    with closing(connect_db()) as db:
        with open(script) as f:
            db.cursor().executescript(f.read())
        db.commit()

def connect_db():
    return connect(DATABASE)

def load_main():
    db = connect_db()
    user_id = 1
    session_id = 1
    query_id = 1
    for users in get_user_sessions(limit=800*BYTES_IN_MB): 
        for user in users:
            insert_user(db, user_id, user.name)
            for (local_sid, session) in user.sessions.iteritems(): 
                insert_session(db, session_id, user_id)
                for query in session.queries:
                    insert_storm_query(db, query_id, query.text, "storm", query.time, query.range,
                                    False, user_id, session_id=session_id)
                    query_id += 1
                session_id += 1
            for query in user.autorecurring_queries:
                insert_storm_query(db, query_id, query.text, query.time, query.range, 
                                True, user_id)
                query_id += 1
            user_id += 1
    db.close()

def load_commands_and_arguments():
    db = connect_db()
    done = 0
    select_cursor = db.execute("SELECT min(id), text FROM queries \
                                    WHERE id>? GROUP BY text", [0]) # to pause
    for (id, query) in select_cursor.fetchall():
        done += 1
        if done % 100 == 0:
            sys.stderr.write(str(done) + " done\n")
            sys.stderr.flush()
        check_cursor = db.execute("SELECT * FROM commands \
                                    WHERE query_id=?", [str(id)])
        if len(check_cursor.fetchall()) == 0:
            parsetree = parse_query(query)
            if parsetree is None:
                last_query = query
                last_failed = True
                continue
            cmds_and_args = parsetree.command_arg_tuple_list()
            insert_commands_and_arguments(db, id, cmds_and_args)
    for (command, id) in select_cursor.fetchall():
        category = lookup_command_category(command) 
        update_cursor = db.cursor()
        update_cursor.execute("UPDATE commands \
                                SET operation_type=? WHERE id=?", 
                                [category, id])
        db.commit()
    db.close()

def lookup_command_category(command):
    parts = command.split('(')
    main_command = parts[0].lower()
    category = "!!!"
    if main_command == "addtotals": # special case because parameter changes category
        if command.find('COL') > -1:
            category = command_type_lookup["addtotals col"]
        else:
            category = command_type_lookup["addtotals row"]
    else:
        try:
            category = command_type_lookup[main_command]
        except:
            sys.stderr.write("Missing category for command: " + parts[0] + "\n")
    return category

def insert_user(db, id, username):
    cursor = db.cursor()
    cursor.execute("INSERT INTO users (id, name) VALUES (?,?)", [id, username])
    db.commit() 

def insert_session(db, id, userid):
    cursor = db.cursor()
    cursor.execute("INSERT INTO sessions (id, user_id) VALUES (?,?)", [id, userid])
    db.commit()

def insert_storm_query(db, id, text, source, time, range, autogenerated, user_id, session_id=None):
    cursor = db.cursor()
    if range == "":
        if session_id is not None:
            cursor.execute("INSERT INTO queries \
                            (id, text, source, time, autogenerated, user_id, session_id) \
                            VALUES (?,?,?,?,?,?,?)", 
                            [id, text, source, time, autogenerated, user_id, session_id])
        else:
            cursor.execute("INSERT INTO queries \
                            (id, text, source, time, autogenerated, user_id) \
                            VALUES (?,?,?,?,?,?)",
                            [id, text, source, time, autogenerated, user_id])
    else:
        if session_id is not None:
            cursor.execute("INSERT INTO queries \
                            (id, text, source, time, range, autogenerated, user_id, session_id) \
                            VALUES (?,?,?,?,?,?,?,?)", 
                            [id, text, source, time, range, autogenerated, user_id, session_id])
        else:
            cursor.execute("INSERT INTO queries \
                            (id, text, time, range, autogenerated, user_id) \
                            VALUES (?,?,?,?,?,?,?)",
                            [id, text, source, time, range, autogenerated, user_id])
    db.commit()

def insert_commands_and_arguments(db, qid, cmds_and_args):
    for (cmd, args) in cmds_and_args:
        cmd_cursor = db.cursor()
        cmd_cursor.execute("INSERT INTO commands (query_id, command) \
                        VALUES (?,?)", [qid, cmd])
        cid = cmd_cursor.lastrowid
        db.commit()
        for (arg, field) in args:
            field = 1 if field else 0
            arg_cursor = db.cursor()
            arg_cursor.execute("INSERT INTO arguments (query_id, command_id, argument, field) \
                                VALUES (?,?,?, ?)", [str(qid), str(cid), arg, field])
            db.commit()

def load_app_queries():
    db = connect_db()
    for (dirpath, dirnames, filenames) in os.walk(APPS_DIR):
        if MACROS_FILE in filenames and SAVEDSEARCHES_FILE in filenames:
            app = dirpath.split("/")[-1]
            queries = extract_app_queries(dirpath)
            for query in queries:
                insert_app_query(db, query, app)
    db.close()

def extract_app_queries(dirpath):
    savedsearches = extract_app_savedsearches(dirpath + "/" + SAVEDSEARCHES_FILE)
    macros = extract_app_macros(dirpath + "/" + MACROS_FILE)
    return replace_macros(savedsearches, macros)

def extract_app_savedsearches(ssfilepath):
    searches = []
    config = ConfigParser.RawConfigParser()
    config.read(ssfilepath)
    for section in config.sections():
        searches.append(config.get(section, "search"))
    return searches

def extract_app_macros(mfilepath):
    macros = {}
    config = ConfigParser.RawConfigParser()
    config.read(mfilepath)
    for section in config.sections():
        macros[section] = config.get(section, "definition")
    return macros

def replace_macros(savedsearches, macros):
    searches = []
    for savedsearch in savedsearches:
        while savedsearch.find('`') > -1:
            for macro in macros.keys():
                if macro in savedsearch:
                    savedsearch = savedsearch.replace("`" + macro + "`", macros[macro])
        searches.append(savedsearch)
    return searches

def insert_app_query(db, query, app):
    cursor = db.cursor()
    cursor.execute("INSERT INTO queries (text, source) VALUES (?,?)", [query, app])
    db.commit()

if __name__ == "__main__":
    parser = ArgumentParser(description="Initialize and load query database. \
                            The main tables are queries, users, and sessions. \
                            The secondary tables are \
                            templates, commands, and arguments.")
    parser.add_argument("--init-all", dest="action", 
                            action="store_const", const=init_all, 
                            help="Initialize all tables for analysis.")
    parser.add_argument("--init-main", dest="action", 
                            action="store_const", const=init_main, 
                            help="Initialize main tables for analysis.")
    parser.add_argument("--init-cmds-and-args", dest="action", 
                            action="store_const", const=init_commands_and_arguments, 
                            help="Initialize commands and arguments \
                                    tables for analysis.")
    parser.add_argument("--load-main", dest="action", 
                            action="store_const", const=load_main, 
                            help="Load main tables for analysis.")
    parser.add_argument("--load-cmds-and-args", dest="action", 
                            action="store_const", const=load_commands_and_arguments, 
                            help="Load commands and arguments \
                                    tables for analysis.")
    parser.add_argument("--load-app-queries", dest="action", 
                            action="store_const", const=load_app_queries, 
                            help="Load app queries for analysis.")

    args = parser.parse_args()
    args.action()
